{"version":3,"sources":["../../src/usecases/CountNotZero.js"],"names":["CountNotZero","zaico","quantity","toNum","undefined","limit","_getLimit","_isLimitStr","_err","d","_toDate","getTime","Date","now","msg","id","code","title","console","error","Base","OPTION_NAMES","LIMIT_DATE","JSON","stringify","_setTitleDate","UNLIMIT_DATE"],"mappings":";;;;;;;;AAAA;;;;;;;;;;;;IAEqBA,Y;;;;;;;;;;;kCAEL;AACZ;AAeD;;;6BAEQC,K,EAAO;AACd;AACA,UAAMC,WAAW,KAAKC,KAAL,CAAWF,MAAMC,QAAjB,CAAjB;AACA,UAAIA,aAAaE,SAAjB,EAA4B;AAC1B,eAAO,KAAP,CAD0B,CACZ;AACf;AACD,UAAMC,QAAQ,KAAKC,SAAL,CAAeL,KAAf,CAAd;AACA,UAAIC,WAAW,CAAX,IAAgB,CAACG,KAArB,EAA4B,OAAO,KAAP,CAPd,CAO4B;AACzC,UAAI,CAAC,KAAKE,WAAL,CAAiBF,KAAjB,CAAL,EAA8B;AAC5B,eAAO,KAAKG,IAAL,CAAU,WAAV,EAAuBP,KAAvB,EAA8BI,KAA9B,CAAP;AACD;AACD,UAAMI,IAAI,KAAKC,OAAL,CAAaL,KAAb,CAAV;AACA,UAAII,KAAKA,EAAEE,OAAF,KAAcC,KAAKC,GAAL,EAAvB,EAAmC;AACjC,eAAO,KAAKL,IAAL,CAAU,MAAV,EAAkBP,KAAlB,EAAyBI,KAAzB,CAAP;AACD;AACD,aAAO,IAAP;AACF;;;yBAEIS,G,EAAKb,K,EAAOI,K,EAAO;AAAA,UACdU,EADc,GACMd,KADN,CACdc,EADc;AAAA,UACVC,IADU,GACMf,KADN,CACVe,IADU;AAAA,UACJC,KADI,GACMhB,KADN,CACJgB,KADI;;AAEtBC,cAAQC,KAAR,CAAiBC,eAAKC,YAAL,CAAkBC,UAAnC,UAAkDR,GAAlD,EAAyDS,KAAKC,SAAL,CAAe,EAAET,MAAF,EAAMC,UAAN,EAAYC,YAAZ,EAAmBZ,YAAnB,EAAf,EAA2C,IAA3C,EAAiD,EAAjD,CAAzD;AACA,aAAO,KAAP;AACD;;;4BAEOJ,K,EAAO;AACb,UAAMI,QAAQ,KAAKC,SAAL,CAAeL,KAAf,CAAd;AACA,UAAMQ,IAAI,KAAKC,OAAL,CAAaL,KAAb,CAAV;AACA,WAAKoB,aAAL,CAAmBxB,KAAnB,EAA0BQ,KAAKW,eAAKM,YAApC;AACA,aAAOzB,KAAP;AACD;;;;EAjDuCmB,c;;kBAArBpB,Y","file":"CountNotZero.js","sourcesContent":["import Base from './Base';\n\nexport default class CountNotZero extends Base {\n\n  description() {\n    return `\\\n【CountNotZero】\n★数量＞０、「賞味（消費）期限（日付型）」あり\n(1) 物品名の先頭の「賞味（消費）期限（日付型）」,【賞味期限】を値の正規化を行い再設定(期限なしのみ正規化はしない)\n=\n「賞味（消費）期限（日付型）」フォーマットがおかしい場合にはエラーを出力\n\nYYYY年MM月DD => YYYY/MM/DD\nYYYY/MM/DD   => YYYY/MM/DD\nYYYYMMDD     => YYYY/MM/DD\n期限なし     => 期限なし\n\n([月/-])DDの省略時は、その月の一番最後の日にする\n\n`;\n  }\n\n  isTarget(zaico) {\n    // 数量\n    const quantity = this.toNum(zaico.quantity);\n    if (quantity === undefined) {\n      return false; // 初期導入データなのでスキップ\n    }\n    const limit = this._getLimit(zaico);\n    if (quantity < 1 || !limit) return false; // (1) skip\n     if (!this._isLimitStr(limit)) {\n       return this._err('フォーマットエラー', zaico, limit);\n     }\n     const d = this._toDate(limit);\n     if (d && d.getTime() < Date.now()) {\n       return this._err('古い期限', zaico, limit);\n     }\n     return true;\n  }\n\n  _err(msg, zaico, limit) {\n    const { id, code, title } = zaico;\n    console.error(`${Base.OPTION_NAMES.LIMIT_DATE}: ${msg}`, JSON.stringify({ id, code, title, limit }, null, ''));\n    return false;\n  }\n\n  editOne(zaico) {\n    const limit = this._getLimit(zaico);\n    const d = this._toDate(limit);\n    this._setTitleDate(zaico, d || Base.UNLIMIT_DATE);\n    return zaico;\n  }\n}\n"]}