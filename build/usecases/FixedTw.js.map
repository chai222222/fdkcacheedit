{"version":3,"sources":["../../src/usecases/FixedTw.js"],"names":["FixedTw","targetFile","twMap","normalMap","Promise","resolve","reject","is","fs","createReadStream","pipe","JSONStream","parse","on","title","_titleWithoutDate","zaico","code","id","_isJan","firstChar","charAt","path","val","_","get","set","startsWith","e","nMap","_normalizeCodeMap","toPairs","forEach","vmap","title2code","newCode","Object","keys","sort","reverse","reduce","acc","tit","undefined","info","assign","console","error","JSON","stringify","quantity","toNum","map","nmap","key","Array","isArray","length","Base"],"mappings":"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","file":"FixedTw.js","sourcesContent":["import fs from 'fs';\nimport _ from 'lodash';\nimport JSONStream from 'JSONStream';\nimport Base from './Base';\n\nexport default class FixedTw extends Base {\n\n  /**\n   * 完全にタイトルが一致して jan フォーマットが正しいデータを除去し、単一コードのみを作成する。\n   * map[char][title] = [{ id, code }];\n   * @param {Object} map 正しいデータのマップ\n   */\n  static _normalizeCodeMap(map) {\n    return Object.keys(map).reduce((nmap, key) => {\n      if (Array.isArray(map[key])) {\n        if(map[key].length === 1) {\n          nmap[key] = map[key][0].code;\n        } else {\n          console.error('タイトルが一致していてJANが正しいものが複数あります', key, JSON.stringify(map[key], null, ''));\n        }\n      } else {\n        nmap[key] = FixedTw._normalizeCodeMap(map[key]);\n      }\n      return nmap;\n    }, {});\n  }\n\n  description() {\n    return `\\\n【FixedTw】\n★codeがtwではじまるデータ\n(1) codeの値をJANで正しいものを検索して置き換える\n\n正しいものは物品名から日付を外して、全データからjanがtwで始まらないもので物品名から日付を外た最短一致したもの。\nJANは８桁、１３桁の数値文字列。\n`;\n  }\n\n  preEdit(targetFile) {\n    this.twMap = {};\n    const normalMap = {}; // normalMap[[先頭１文字][title] = [ { code(String) twで始まらないcode, id } ]\n    return new Promise((resolve, reject) => {\n      const is = fs.createReadStream(targetFile, 'utf-8');\n      is.pipe(JSONStream.parse('*'))\n        .on('data', zaico => {\n          const title = this._titleWithoutDate(zaico.title)\n          const { code, id } = zaico;\n          if (this._isJan(code)) { // codeが文字列値が入っていないものは無視する\n            const firstChar = title.charAt(0);\n            const path = `['${firstChar}']['${title}']`;\n            const val = _.get(normalMap, path, []); // 完全一致が存在するので配列で持つ\n            _.set(normalMap, path, [...val, { code, id }]);\n          } else if (typeof code === 'string' && code.startsWith('tw')) { // zaico自動設定\n            this.twMap[id] = { title, code }\n          }\n        }).on('error', (e) => {\n          reject(e);\n        }).on('end', () => {\n          const nMap = FixedTw._normalizeCodeMap(normalMap); // normalMap[[先頭１文字][title] = code(String) twで始まらないcode\n          _.toPairs(this.twMap).forEach(([id, vmap]) => {\n            const firstChar = vmap.title.charAt(0);\n            const title2code = _.get(nMap, `['${firstChar}']`, {});\n            vmap.newCode = Object.keys(title2code).sort().reverse().reduce((acc, tit) => {\n              return tit.startsWith(vmap.title) ? title2code[tit] : acc;\n            }, undefined);\n          });\n          _.toPairs(this.twMap).forEach(([id, vmap]) => {\n            if (!vmap.newCode) {\n              const info = Object.assign({ id, ...vmap });\n              console.error('修復不可', JSON.stringify(info, null, ''));\n            }\n          });\n          resolve();\n        });\n    });\n  }\n\n  isTarget(zaico) {\n    // 数量\n    const quantity = this.toNum(zaico.quantity);\n    if (quantity === undefined) {\n      return false; // 初期導入データなのでスキップ\n    }\n    return this.twMap[zaico.id] && this.twMap[zaico.id].newCode;\n  }\n\n  editOne(zaico) {\n    zaico.code = this.twMap[zaico.id].newCode;\n    return zaico;\n  }\n}\n"]}